<?php
// +----------------------------------------------------------------------
// | Fanwe 方维p2p借贷系统
// +----------------------------------------------------------------------
// | Copyright (c) 2011 http://www.fanwe.com All rights reserved.
// +----------------------------------------------------------------------
// | Author: 甘味人生(526130@qq.com)
// +----------------------------------------------------------------------

class PropAction extends CommonAction{
    public function index()
    {

        if(strim($_REQUEST['name'])!=''){
            $map['name'] = array('like','%'.strim($_REQUEST['name']).'%');
        }

        if($_REQUEST['is_animated']!=''&&intval($_REQUEST['is_animated'])!=-1)
        {
            $map['is_animated']=intval($_REQUEST['is_animated']);
        }

        if (method_exists ( $this, '_filter' )) {
            $this->_filter ( $map );
        }
        $name=$this->getActionName();
        $model = D ($name);
        if (! empty ( $model )) {
            $this->_list ( $model, $map );
        }
        $list = $this->get("list");
        $cate_list = M("VideoCate")->findAll();
        $this->assign("cate_list",$cate_list);
        $this->display ();
    }

    public function add()
    {
        $this->assign("new_sort", M("Prop")->max("sort")+1);
        $this->display();
    }
    public function edit() {
        $id = intval($_REQUEST ['id']);
        $condition['id'] = $id;
        $vo = M(MODULE_NAME)->where($condition)->find();
        $this->assign ( 'vo', $vo );
        $this->display ();
    }

    //彻底删除指定记录
    public function foreverdelete() {
        //彻底删除指定记录
        $ajax = intval($_REQUEST['ajax']);
        $id = $_REQUEST ['id'];
        if (isset ( $id )) {
            $condition = array ('id' => array ('in', explode ( ',', $id ) ) );
            $rel_data = M(MODULE_NAME)->where($condition)->findAll();
            foreach($rel_data as $data)
            {
                $info[] = $data['name'];
            }
            if($info) $info = implode(",",$info);
            $list = M(MODULE_NAME)->where ( $condition )->delete();
            //删除相关预览图
//				foreach($rel_data as $data)
//				{
//					@unlink(get_real_path().$data['preview']);
//				}			
            if ($list!==false) {
                //删除子动画
                $animate_condition = array ('prop_id' => array ('in', explode ( ',', $id ) ) );
                $list = M("PropAnimated")->where ( $animate_condition )->delete();
                save_log($info.l("FOREVER_DELETE_SUCCESS"),1);
                clear_auto_cache("prop_list");
                clear_auto_cache("prop_id",array('id'=>$data['id']));
                $this->success (l("FOREVER_DELETE_SUCCESS"),$ajax);
            } else {
                save_log($info.l("FOREVER_DELETE_FAILED"),0);
                $this->error (l("FOREVER_DELETE_FAILED"),$ajax);
            }
        } else {
            $this->error (l("INVALID_OPERATION"),$ajax);
        }
    }

    public function insert() {
        B('FilterString');
        $ajax = intval($_REQUEST['ajax']);
        $data = M(MODULE_NAME)->create ();
        //开始验证有效性
        $this->assign("jumpUrl",u(MODULE_NAME."/add"));
        $m_config = load_auto_cache('m_config');
        $ticket_name = $m_config['ticket_name']!=''?$m_config['ticket_name']:'印票';
        if(!check_empty($data['name']))
        {
            $this->error("请输入名称");
        }
        if(!check_empty($data['icon']))
        {
            $this->error("请输入图标");
        }
        if(!check_empty($data['diamonds']))
        {
            if($data['is_red_envelope']==1){
                $this->error("请输入消费钻石");
            }
        }
        if((intval($data['score'])==0))
        {
            $data['score'] = 0;
        }
        if(intval($data['robot_diamonds'])==0)
        {
            $data['robot_diamonds'] = 0;
        }
        if($data['is_red_envelope']==1){
            if(!(intval($data['diamonds'])>0))
            {
                $this->error("消费钻石必须大于0");
            }
            if((intval($data['diamonds']))<=(intval($data['ticket'])))
            {
                $this->error("消费钻石必须大于主播获得的钻石数量");
            }
            if((intval($data['diamonds']))<=(intval($data['ticket']))+(intval($data['robot_diamonds'])))
            {
                $this->error("消费钻石必须大于（主播获得的钻石数量+机器人获得的钻石数量)");
            }
        }
        if(intval($data['ticket'])==0)
        {
            $data['ticket'] = 0;
        }
        if(intval($data['is_animated'])==2){
            if(!check_empty($data['anim_type']))
            {
                $this->error("请输入大型动画礼物类型");
            }
        }
        if((intval($data['diamonds'])==0)&&(intval($data['score'])==0)){
            if(intval($data['ticket'])!=0){
                $this->error('免费礼物的'.$ticket_name.'数量必须为0');
            }
        }
        // 更新数据
        $log_info = $data['name'];
        $list=M(MODULE_NAME)->add($data);
        if (false !== $list) {
            //成功提示
            save_log($log_info.L("INSERT_SUCCESS"),1);
            clear_auto_cache("prop_list");
            $this->success(L("INSERT_SUCCESS"));
        } else {
            //错误提示
            save_log($log_info.L("INSERT_FAILED"),0);
            $this->error(L("INSERT_FAILED"));
        }
    }

    public function update() {
        B('FilterString');
        $data = M(MODULE_NAME)->create();
		clear_auto_cache("prop_list");
//		if($_FILES['preview']['name']!='')
//		{
//			$result = $this->uploadImage();
//			if($result['status']==0)
//			{
//				$this->error($result['info'],$ajax);
//			}
//			//删除图片
//			@unlink(get_real_path().M("Article")->where("id=".$data['id'])->getField("preview"));
//			$data['preview'] = $result['data'][0]['bigrecpath'].$result['data'][0]['savename'];
//		}
        $m_config = load_auto_cache('m_config');
        $ticket_name = $m_config['ticket_name']!=''?$m_config['ticket_name']:'印票';
        $log_info = M(MODULE_NAME)->where("id=".intval($data['id']))->getField("name");
        //开始验证有效性
        $this->assign("jumpUrl",u(MODULE_NAME."/edit",array("id"=>$data['id'])));
        if(!check_empty($data['name']))
        {
            $this->error("请输入名称");
        }
        if(!check_empty($data['icon']))
        {
            $this->error("请输入图标");
        }
        if(!check_empty($data['diamonds']))
        {
            if($data['is_red_envelope']==1){
                $this->error("请输入消费钻石");
            }
        }
        if((intval($data['score'])==0))
        {
            $data['score'] = 0;
        }
        if($data['is_red_envelope']==1){
            if(!(intval($data['diamonds'])>0))
            {
                $this->error("消费钻石必须大于0");
            }
            if((intval($data['diamonds']))<=(intval($data['ticket'])))
            {
                $this->error("消费钻石必须大于主播获得的钻石数量");
            }
            if((intval($data['diamonds']))<=(intval($data['ticket']))+(intval($data['robot_diamonds'])))
            {
                $this->error("消费钻石必须大于（主播获得的钻石数量+机器人获得的钻石数量)");
            }
        }
        if(intval($data['ticket'])==0)
        {
            $data['ticket'] = 0;
        }
        if(intval($data['robot_diamonds'])==0)
        {
            $data['robot_diamonds'] = 0;
        }
        if(intval($data['is_animated'])==2){
            if(!check_empty($data['anim_type']))
            {
                $this->error("请输入大型动画礼物类型");
            }
        }
        if((intval($data['diamonds'])==0)&&(intval($data['score'])==0)){
            if(intval($data['ticket'])!=0){
                $this->error('免费礼物的'.$ticket_name.'数量必须为0');
            }
        }
        // 更新数据
        $list=M(MODULE_NAME)->save ($data);
        if (false !== $list) {
            //成功提示
            save_log($log_info.L("UPDATE_SUCCESS"),1);
            clear_auto_cache("prop_id",array('id'=>$data['id']));
            $this->success(L("UPDATE_SUCCESS"));
        } else {
            //错误提示
            save_log($log_info.L("UPDATE_FAILED"),0);
            $this->error(L("UPDATE_FAILED"),0,$log_info.L("UPDATE_FAILED"));
        }
    }

    public function set_effect()
    {
    	clear_auto_cache("prop_list");
        $id = intval($_REQUEST['id']);
        $ajax = intval($_REQUEST['ajax']);
        $info = M(MODULE_NAME)->where("id=".$id)->getField("name");
        $c_is_effect = M(MODULE_NAME)->where("id=".$id)->getField("is_effect");  //当前状态
        $n_is_effect = $c_is_effect == 0 ? 1 : 0; //需设置的状态
        M(MODULE_NAME)->where("id=".$id)->setField("is_effect",$n_is_effect);
        save_log($info.l("SET_EFFECT_".$n_is_effect),1);
        $this->ajaxReturn($n_is_effect,l("SET_EFFECT_".$n_is_effect),1)	;
    }

    public function set_sort()
    {
    	clear_auto_cache("prop_list");
        $id = intval($_REQUEST['id']);
        $sort = intval($_REQUEST['sort']);
        $log_info = M(MODULE_NAME)->where("id=".$id)->getField("name");
        if(!check_sort($sort))
        {
            $this->error(l("SORT_FAILED"),1);
        }
        M("Prop")->where("id=".$id)->setField("sort",$sort);
        save_log($log_info.l("SORT_SUCCESS"),1);
        $this->success(l("SORT_SUCCESS"),1);
    }
/**
 * 子动画
 */
    public function prop_item(){
    	$prop_id = intval($_REQUEST['id']);
		$prop_info = M("Prop")->getById($prop_id);

		$this->assign("prop_info",$prop_info);
		if($prop_info)
		{
			$map['prop_id'] = $prop_info['id'];		
			if (method_exists ( $this, '_filter' )) {
				$this->_filter ( $map );
			}
			$model = D ("PropAnimated");
			if (! empty ( $model )) {
				$this->_list ( $model, $map );
			}
		}
		$this->display();
    }
 /**
 * 添加子动画
 */	
	public function add_prop_item()
	{
		$prop_id = intval($_REQUEST['id']);
		$prop_info = M("Prop")->getById($prop_id);
		$this->assign("prop_info",$prop_info);
		$this->display();
	}
/**
 * 写入子动画
 */
	public function insert_prop_item() {
		B('FilterString');
		$ajax = intval($_REQUEST['ajax']);
		$data = M("PropAnimated")->create ();
        if(!check_empty($data['url']))
        {
            $this->error("请上传图标");
        }
		$Count = M('PropAnimated')->where('prop_id = '.$data['prop_id'])->count();
		if($Count>5){
			$this->error('已经添加五个动画！不能再添加');
		}
		//开始验证有效性
		$this->assign("jumpUrl",u(MODULE_NAME."/add_prop_item",array("id"=>$data['prop_id'])));
		
		$prop_name = M('Prop')->where('prop_id = '.$data['prop_id'])->getField("name");
		// 更新数据
		$list=M("PropAnimated")->add($data);
		$log_info =  $prop_name."礼物动画: ".$data['prop_id'];
		if (false !== $list) {
			//成功提示			
			save_log($log_info.L("INSERT_SUCCESS"),1);
            clear_auto_cache("prop_id",array('id'=>$data['prop_id']));
			$this->success(L("INSERT_SUCCESS"));
		} else {
			//错误提示
			save_log($log_info.L("INSERT_FAILED"),0);
			$this->error(L("INSERT_FAILED"));
		}
	}
/**
 * 编辑子动画
 */	
	public function edit_prop_item()
	{
		$id = intval($_REQUEST ['id']);
		$condition['id'] = $id;		
		$vo = M("PropAnimated")->where($condition)->find();
		$this->assign ('vo', $vo );		
		$prop_info = M("Prop")->where("id=".intval($vo['prop_id'])."")->find();
		$this->assign ( 'prop_info', $prop_info );
		$this->display();
	}
/**
 * 更新子动画
 */	
	public function update_prop_item() {
		B('FilterString');
		$ajax = intval($_REQUEST['ajax']);
		$data = M("PropAnimated")->create ();
        if(!check_empty($data['url']))
        {
            $this->error("请上传图标");
        }
		//开始验证有效性
		$this->assign("jumpUrl",u(MODULE_NAME."/edit_prop_item",array("id"=>$data['id'])));
		
		$prop_item=M("PropAnimated")->getById(intval($data['id']));
		
		if(!$prop_item)
			$this->error("更新失败");
						
		$prop_name = M('Prop')->where('prop_id = '.$data['prop_id'])->getField("name");
		// 更新数据
		$list=M("PropAnimated")->save($data);
		
		$log_info = $prop_name."礼物动画: ".$data['prop_id'];
		if (false !== $list) {
			//成功提示
			save_log($log_info.L("UPDATE_SUCCESS"),1);
            clear_auto_cache("prop_id",array('id'=>$data['prop_id']));
			$this->success(L("UPDATE_SUCCESS"));
		} else {
			//错误提示
			save_log($log_info.L("UPDATE_FAILED"),0);
			$this->error(L("UPDATE_FAILED"));
		}
	}
/**
 * 删除子动画
 */	
	public function del_prop_item()
	{
		$ajax = intval($_REQUEST['ajax']);
		$id = $_REQUEST ['id'];
		if (isset ( $id )) {
				$condition = array ('id' => array ('in', explode ( ',', $id ) ) );				
				$rel_data = M("PropAnimated")->where($condition)->findAll();				
				foreach($rel_data as $data)
				{
					$prop_id = $data['prop_id'];
				}

				$prop_name = M('Prop')->where('prop_id = '.$prop_id)->getField("name");
				$info = $prop_name."礼物动画: ".$data['prop_id'];
				$list = M("PropAnimated")->where ( $condition )->delete();				
				if ($list!==false) {					
					save_log($info.l("FOREVER_DELETE_SUCCESS"),1);
                    clear_auto_cache("prop_id",array('id'=>$data['prop_id']));
					$this->success (l("FOREVER_DELETE_SUCCESS"),$ajax);
				} else {
					save_log($info.l("FOREVER_DELETE_FAILED"),0);
					$this->error (l("FOREVER_DELETE_FAILED"),$ajax);
				}
			} else {
				$this->error (l("INVALID_OPERATION"),$ajax);
		}
	}

    //道具消耗统计
    public function consume_statistics()
    {
        
        //统计所有送礼物表
        $prop_tables = array(); //存放送礼物表的数组
        $prop_tables[] =  DB_PREFIX.'video_prop';
        $time = time()-28800;
        $year = intval(to_date($time,'Y')); //年
        $month = intval(to_date($time,'m'));    //月
        $table = DB_PREFIX.'video_prop_'.to_date($time,'Ym');
        $res = $GLOBALS['db']->getRow("SHOW TABLES LIKE'$table'");
        /*admin_ajax_return($table);*/
        while ($res)    
        {
            $prop_tables[]=$table;      //获取该数据库下所有的送礼物表
            $month--;
            if ($month>0)
            {
                $month>=10?$prev_m = strval($year).$month:$prev_m = strval($year).'0'.$month;
                $table = DB_PREFIX . 'video_prop_' . $prev_m;
                $res = $GLOBALS['db']->getRow("SHOW TABLES LIKE'$table'");
            }
            else if ($month<=0)
            {
                $month = '12';
                $year --;
                $prev_y = $year.$month;
                $table = DB_PREFIX . 'video_prop_' . $prev_y;
                $res = $GLOBALS['db']->getRow("SHOW TABLES LIKE'$table'");
            }
        }

        //列表过滤器，生成时间搜索查询Map对象
        $map = $this->com_search();

        $parameter = '';
        $sql_w = '';
        //查看是否有进行时间搜索
        if($map['start_time'] != '' && $map['end_time'] != ''){
            $parameter.=" create_time between '". $map['start_time'] . "' and '". $map['end_time'] ."'&";
            $sql_w .=" create_time between '". $map['start_time']. "' and '". $map['end_time'] ."' and ";     
        }  
        //查看是否有进行道具名搜索
        if(strim($_REQUEST['name'])!=''){
            $sql_w .= " prop_name like '%".strim($_REQUEST['name'])."%' and ";   
        } 

        $model = D ();

        //获取道具统计表的sql
        $sql_str = "SELECT res.id,res.name,res.price,sum(res.sale) as sale,sum(res.total) as total FROM (";
        //获取总量与总金额
        $sql_count = "SELECT sum(res.count) as count,sum(res.count_price) as count_price FROM (";
        for($i=0;$i<count($prop_tables);$i++)   //连接所有礼物表进行查询
        {
            $sql_str .= "SELECT p.id as id,p.name as name,p.diamonds as price,count(v.prop_id) as sale,sum(v.total_diamonds) as total " .
                " FROM ".DB_PREFIX."prop p , ".$prop_tables[$i]." v WHERE p.id = v.prop_id ";
            $sql_str .= " and ".$sql_w." 1=1 group by p.id ";

            $sql_count .= "SELECT count(prop_id) as count, sum(total_diamonds) as count_price " .
            " FROM ".$prop_tables[$i]." where 1=1 ";
            $sql_count .= " and ".$sql_w." 1=1 ";

            if($i<count($prop_tables)-1)
            {
                $sql_str .= " union all ";
                $sql_count .= " union all ";
            }
        }
        $sql_str .= " ) as res group by res.id " ;
        $sql_count .= " ) as res ";
        $voList = $this->_Sql_list($model, $sql_str, "&".$parameter,'id',true);
        $countList = $GLOBALS['db']->getRow($sql_count);
        
        $this->assign ( 'list', $voList );
        $this->assign("count",$countList['count']);
        $this->assign("count_price",$countList['count_price']);
        $this->display ();
        return;
    }

    //道具消耗明细
    public function detail()
    {
        //统计所有送礼物表
        $prop_tables = array(); //存放送礼物表的数组
        $time = time()-28800;
        $year = intval(to_date($time,'Y')); //年
        $month = intval(to_date($time,'m'));    //月
        $table = DB_PREFIX.'video_prop_'.to_date($time,'Ym');
        $res = $GLOBALS['db']->getRow("SHOW TABLES LIKE'$table'");
        /*admin_ajax_return($table);*/
        while ($res)    
        {
            $prop_tables[]=$table;      //获取该数据库下所有的送礼物表
            $month--;
            if ($month>0)
            {
                $month>=10?$prev_m = strval($year).$month:$prev_m = strval($year).'0'.$month;
                $table = DB_PREFIX . 'video_prop_' . $prev_m;
                $res = $GLOBALS['db']->getRow("SHOW TABLES LIKE'$table'");
            }
            else if ($month<=0)
            {
                $month = '12';
                $year --;
                $prev_y = $year.$month;
                $table = DB_PREFIX . 'video_prop_' . $prev_y;
                $res = $GLOBALS['db']->getRow("SHOW TABLES LIKE'$table'");
            }
        }

        //列表过滤器，生成时间搜索查询Map对象
        $map = $this->com_search();

        $prop_id = strim($_REQUEST['id']);

        $parameter = '';
        $sql_w = '';
        //查看是否有进行时间搜索
        if($map['start_time'] != '' && $map['end_time'] != ''){
            $parameter.=" create_time between '". $map['start_time'] . "' and '". $map['end_time'] ."'&";
            $sql_w .=" create_time between '". $map['start_time']. "' and '". $map['end_time'] ."' and ";     
        }  
        //查看是否有进行使用者或接收者ID搜索
        if(strim($_REQUEST['from_user_id'])!=''){
            $sql_w .= " from_user_id like '%".strim($_REQUEST['from_user_id'])."%' and ";   
        } 
        if(strim($_REQUEST['to_user_id'])!=''){
            $sql_w .= " to_user_id like '%".strim($_REQUEST['to_user_id'])."%' and ";   
        } 

        $model = D ();

        //获取道具明细表的sql
        $sql_str = "";
        //获取总量与总金额的sql
        $sql_count = "SELECT sum(res.count) as count,sum(res.count_price) as count_price FROM (";
        for($i=0;$i<count($prop_tables);$i++)   //连接所有礼物表进行查询
        {
            $sql_str .= "SELECT prop_id as id ,prop_name as name,from_user_id,to_user_id,total_diamonds as diamonds,create_time as time " .
            " FROM ".$prop_tables[$i]." where prop_id = ".$prop_id;
            $sql_str .= " and ".$sql_w." 1=1 ";


            $sql_count .= "SELECT count(prop_id) as count, sum(total_diamonds) as count_price " .
            " FROM ".$prop_tables[$i]." where prop_id = ".$prop_id;
            $sql_count .= " and ".$sql_w." 1=1 ";


            if($i<count($prop_tables)-1)
            {
                $sql_str .= " union all ";
                $sql_count .= " union all ";
            }
        }
        $sql_count .= ") as res ";
        /*admin_ajax_return($sql_str);*/
        $voList = $this->_Sql_list($model, $sql_str, "&".$parameter,'time');
        for($i=0;$i<count($voList);$i++)
        {
            $voList[$i]['time'] = to_date($voList[$i]['time']);
        }

        $countList = $GLOBALS['db']->getRow($sql_count);

        $this->assign ( 'list', $voList );
        $this->assign("count",$countList['count']);
        $this->assign("count_price",$countList['count_price']);
        $this->display ();
        return;
    }

    //导出电子表
    public function export_csv($page = 1)
    {

        $pagesize = 10;
        set_time_limit(0);
        $limit = (($page - 1)*intval($pagesize)).",".(intval($pagesize));

        //统计所有送礼物表
        $prop_tables = array(); //存放送礼物表的数组
        $time = time()-28800;
        $year = intval(to_date($time,'Y')); //年
        $month = intval(to_date($time,'m'));    //月
        $table = DB_PREFIX.'video_prop_'.to_date($time,'Ym');
        $res = $GLOBALS['db']->getRow("SHOW TABLES LIKE'$table'");
        /*admin_ajax_return($table);*/
        while ($res)    
        {
            $prop_tables[]=$table;      //获取该数据库下所有的送礼物表
            $month--;
            if ($month>0)
            {
                $month>=10?$prev_m = strval($year).$month:$prev_m = strval($year).'0'.$month;
                $table = DB_PREFIX . 'video_prop_' . $prev_m;
                $res = $GLOBALS['db']->getRow("SHOW TABLES LIKE'$table'");
            }
            else if ($month<=0)
            {
                $month = '12';
                $year --;
                $prev_y = $year.$month;
                $table = DB_PREFIX . 'video_prop_' . $prev_y;
                $res = $GLOBALS['db']->getRow("SHOW TABLES LIKE'$table'");
            }
        }

        //列表过滤器，生成时间搜索查询Map对象
        $map = $this->com_search();

        $sql_w = '';
        //查看是否有进行时间搜索
        if($map['start_time'] != '' && $map['end_time'] != ''){
            $parameter.=" create_time between '". $map['start_time'] . "' and '". $map['end_time'] ."'&";
            $sql_w .=" create_time between '". $map['start_time']. "' and '". $map['end_time'] ."' and ";     
        }  
        //查看是否有进行道具名搜索
        if(strim($_REQUEST['name'])!=''){
            $sql_w .= " prop_name like '%".strim($_REQUEST['name'])."%' and ";   
        } 

        //获取道具统计表的sql
        $sql_str = "SELECT res.id,res.name,res.price,sum(res.sale) as sale,sum(res.total) as total FROM (";
        //获取总量与总金额
        $sql_count = "SELECT sum(res.count) as count,sum(res.count_price) as count_price FROM (";
        for($i=0;$i<count($prop_tables);$i++)   //连接所有礼物表进行查询
        {
            $sql_str .= "SELECT p.id as id,p.name as name,p.diamonds as price,count(v.prop_id) as sale,sum(v.total_diamonds) as total " .
                " FROM ".DB_PREFIX."prop p , ".$prop_tables[$i]." v WHERE p.id = v.prop_id ";
            $sql_str .= " and ".$sql_w." 1=1 group by p.id ";

            $sql_count .= "SELECT count(prop_id) as count, sum(total_diamonds) as count_price " .
            " FROM ".$prop_tables[$i]." where 1=1 ";
            $sql_count .= " and ".$sql_w." 1=1 ";

            if($i<count($prop_tables)-1)
            {
                $sql_str .= " union all ";
                $sql_count .= " union all ";
            }
        }
        $sql_str .= " ) as res group by res.id " ;
        $sql_count .= " ) as res ";

        $time ='1970-01-01 16:00:00';
        $sql =$sql_str." limit ";
        $sql .= $limit;
        /*admin_ajax_return($sql);*/
        $list=$GLOBALS['db']->getAll($sql);
        /*admin_ajax_return($list);*/
        if($list)
        {
            register_shutdown_function(array(&$this, 'export_csv'), $page+1);
            $m_config = load_auto_cache('m_config');
            $ticket_name = $m_config['ticket_name']!=''?$m_config['ticket_name']:'印票';
            $refund_value = array( 'id'=>'""','name'=>'""','price'=>'""', 'sale'=>'""', 'total'=>'""'); 
            if($page == 1)
            {
                $content = iconv("utf-8","gbk","ID,道具名,道具单价(钻石),道具消耗量,总消耗额(钻石)");
                $content = $content . "\n";
            }
            foreach($list as $k=>$v)
            {
                $refund_value['id'] = '"' . iconv('utf-8','gbk',$list[$k]['id']) . '"';
                $refund_value['name'] = '"' . iconv('utf-8','gbk',$list[$k]['name']) . '"';
                $refund_value['price'] = '"' . iconv('utf-8','gbk',$list[$k]['price']) . '"';
                $refund_value['sale'] = '"' . iconv('utf-8','gbk',$list[$k]['sale']) . '"';
                $refund_value['total'] = '"' . iconv('utf-8','gbk',$list[$k]['total']) . '"';
                $content .= implode(",", $refund_value) . "\n";
            }

            header("Content-Disposition: attachment; filename=prop_statistics.csv");
            echo $content ;
        }
        else
        {
            if($page==1)
                $this->error(L("NO_RESULT"));
        }
    }
}
?>